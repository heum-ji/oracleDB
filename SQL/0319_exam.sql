/*
    03.19(금)
    OBJECT 실습
*/

/* MEMBER */
CREATE TABLE MEMBER (
    MEMBER_NO         NUMBER        PRIMARY KEY,
    MEMBER_USERID     VARCHAR2(20)  UNIQUE NOT NULL,
    MEMBER_USERPWD    CHAR(20)      NOT NULL,	        
    MEMBER_NICKNAME   VARCHAR2(20)  UNIQUE NOT NULL,			
    MEMBER_GENDER     VARCHAR2(3)   NOT NULL CHECK(MEMBER_GENDER IN ('남','여')),
    MEMBER_EMAIL      VARCHAR2(30)  NOT NULL
);
CREATE SEQUENCE MEMBER_SEQ START WITH 1000 INCREMENT BY 1 MAXVALUE 1000000 NOCYCLE NOCACHE;
/* BOARD */
CREATE TABLE BOARD (
    BOARD_NO          NUMBER        PRIMARY KEY,
    BOARD_TITLE       VARCHAR2(20)  NOT NULL,
    BOARD_CONTENT     VARCHAR2(200) NOT NULL,
    BOARD_WRITEDATE   DATE          NOT NULL,
    BOARD_NICKNAME    VARCHAR2(20)  NOT NULL REFERENCES MEMBER(MEMBER_NICKNAME)
);
CREATE SEQUENCE BOARD_SEQ START WITH 1 INCREMENT BY 1 MAXVALUE 5000000 NOCYCLE NOCACHE;
/* MEMBER INSERT */
INSERT INTO MEMBER VALUES(MEMBER_SEQ.NEXTVAL,'ID1','1234','NM1','남','abc@naver.com');
INSERT INTO MEMBER VALUES(MEMBER_SEQ.NEXTVAL,'ID2','1234','NM2','여','abㅇㅇ@naver.com');
INSERT INTO MEMBER VALUES(MEMBER_SEQ.NEXTVAL,'ID3','2345','NM3','남','ㅠㅠㅠabc@naver.com');
/* BOARD INSERT */
INSERT INTO BOARD VALUES(BOARD_SEQ.NEXTVAL,'TITLE 1','게시글 테스트 01',SYSDATE,'NM1');
INSERT INTO BOARD VALUES(BOARD_SEQ.NEXTVAL,'TITLE 2','게시글 테스트 02',SYSDATE,'NM2');
/* SELECT */
SELECT * FROM MEMBER;
SELECT * FROM BOARD;
SELECT * FROM MEMBER_BOARD_VIEW;
SELECT * FROM MEMBER_BOARD_VIEW2;
DROP VIEW MEMBER_BOARD_VIEW2;
SELECT * FROM M;
SELECT * FROM B;
/* VIEW - JOIN */
-- VIEW 권한 추가 -> GRANT CREATE VIEW TO khtest;
CREATE VIEW MEMBER_BOARD_VIEW
AS
SELECT MEMBER_NO "회원 번호",MEMBER_NICKNAME "회원 닉네임",MEMBER_EMAIL "회원 이메일",BOARD_TITLE "회원 작성글 제목"
FROM MEMBER
JOIN BOARD ON (MEMBER_NICKNAME = BOARD.BOARD_NICKNAME);
/* SYNONYM */
-- SYNONYM 권한 추가 -> GRANT CREATE SYNONYM TO khtest;
CREATE SYNONYM M FOR MEMBER;
CREATE SYNONYM B FOR BOARD;

/*
    PL/SQL 실습
*/

-- 1. %TYPE
DECLARE
    TEST_ID       EMPLOYEE.EMP_ID%TYPE;
    TEST_NAME     EMPLOYEE.EMP_NAME%TYPE;
    TEST_JOB      EMPLOYEE.JOB_CODE%TYPE;
    TEST_SALARY   EMPLOYEE.SALARY%TYPE;
BEGIN
    SELECT
        EMP_ID,
        EMP_NAME,
        JOB_CODE,
        SALARY
    INTO TEST_ID,TEST_NAME,TEST_JOB,TEST_SALARY
    FROM EMPLOYEE
    WHERE EMP_NAME = '송종기';

    DBMS_OUTPUT.PUT_LINE(TEST_ID);
    DBMS_OUTPUT.PUT_LINE(TEST_NAME);
    DBMS_OUTPUT.PUT_LINE(TEST_JOB);
    DBMS_OUTPUT.PUT_LINE(TEST_SALARY);
END;
/
-- 2. RECORD
DECLARE
    TYPE MYRECORD IS RECORD (
        ID        EMPLOYEE.EMP_ID%TYPE,
        NAME      EMPLOYEE.EMP_NAME%TYPE,
        DEPT      DEPARTMENT.DEPT_TITLE%TYPE,
        JOBNAME   JOB.JOB_NAME%TYPE
    );
    MY MYRECORD;
BEGIN
    SELECT
        EMP_ID,
        EMP_NAME,
        DEPT_TITLE,
        JOB_NAME
    INTO MY
    FROM
        EMPLOYEE
        LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
        LEFT JOIN JOB USING ( JOB_CODE )
    WHERE EMP_NAME = '&사원이름';

    DBMS_OUTPUT.PUT_LINE(MY.ID);
    DBMS_OUTPUT.PUT_LINE(MY.NAME);
    DBMS_OUTPUT.PUT_LINE(MY.DEPT);
    DBMS_OUTPUT.PUT_LINE(MY.JOBNAME);
END;
/
-- 3. ROWTYPE
DECLARE
    MYEMP    EMPLOYEE%ROWTYPE;
    MYDEPT   DEPARTMENT%ROWTYPE;
BEGIN
    SELECT
        EMP_NAME,
        EMP_NO,
        HIRE_DATE,
        DEPT_TITLE
    INTO MYEMP.EMP_NAME,MYEMP.EMP_NO,MYEMP.HIRE_DATE,MYDEPT.DEPT_TITLE
    FROM EMPLOYEE LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
    WHERE EMP_ID = '&사원번호';

    DBMS_OUTPUT.PUT_LINE(MYEMP.EMP_NAME);
    DBMS_OUTPUT.PUT_LINE(MYEMP.EMP_NO);
    DBMS_OUTPUT.PUT_LINE(MYEMP.HIRE_DATE);
    DBMS_OUTPUT.PUT_LINE(MYDEPT.DEPT_TITLE);
END;
/
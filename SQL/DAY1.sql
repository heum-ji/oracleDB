/*
    데이터를 저장할 테이블 생성
    회원관리용 테이블 생성
    테이블 이름 : MEMBER
    저장할 회원 정보 : 이름,주소,나이,성별,등급,전화번호
    이름 : NAME - 문자(VARCHAR2 -> 한글기준 5글자 -> 15)
    주소 : ADDR - 문자(VARCHAR2 -> 500
    나이 : AGE - 숫자(NUMBER)
    성별 : GENDER - 문자(CHAR -> 1)
    등급 : GRADE - 문자(VARCHAR2 -> 10)
    010XXXXXXXX > 11,010-XXXX-XXXX -> 13
    전화번호 : PHONE_NUMBER - (CHAR -> 13)
*/
CREATE TABLE MEMBER (
    NAME           VARCHAR2(15),
    ADDR           VARCHAR2(500),
    AGE            NUMBER,
    GENDER         CHAR(1),
    GRADE          VARCHAR2(10),
    PHONE_NUMBER   CHAR(13)
);
COMMENT ON COLUMN MEMBER.NAME IS '회원이름';
COMMENT ON COLUMN MEMBER.ADDR IS '주소';
COMMENT ON COLUMN MEMBER.AGE IS '나이';
COMMENT ON COLUMN MEMBER.GENDER IS '성별';
COMMENT ON COLUMN MEMBER.GRADE IS '등급';
COMMENT ON COLUMN MEMBER.PHONE_NUMBER IS '전화번호';

INSERT INTO MEMBER VALUES('유저01','서울시 영등포구 당산동',20,'M','SILVER','010-1234-5678');
INSERT INTO MEMBER VALUES('유저02','서울시 양천구 신정동',30,'F','GOLD','010-6548-0346');
INSERT INTO MEMBER VALUES('유저03','서울시 구로구 구로동',50,'F','VIP','010-9878-9425');
INSERT INTO MEMBER VALUES('유저04','서울시 강남구 용산동',60,'M','MASTER','010-1594-3457');
INSERT INTO MEMBER VALUES('유저05','서울시 강서구 얍얍동',10,'M','BRONZE','010-6457-7643');
INSERT INTO MEMBER VALUES('유저06','서울시',10,'W','BRONZE','010-6457-7643');

SELECT * FROM MEMBER;
SELECT * FROM MEMBER WHERE GENDER = 'F';

CREATE TABLE MEMBER_TBL (
    MEMBER_ID     VARCHAR2(20) UNIQUE,
    MEMBER_PW     VARCHAR2(20),
    MEMBER_NAME   VARCHAR2(10)
);

INSERT INTO MEMBER_TBL VALUES('user01', '1234', '유저1');
INSERT INTO MEMBER_TBL VALUES('user02', '1111', '유저2');
INSERT INTO MEMBER_TBL VALUES('user03', '2345', '유저3');

SELECT * FROM MEMBER_TBL;
DROP TABLE MEMBER_TBL;
/*---------------------------------------------------------------------
-- 비교를 위한 제약조건이 없는 기본 테이블
CREATE TABLE user_nocons (
    user_no     NUMBER,
    user_id     VARCHAR2(20),
    user_fw     VARCHAR2(20),
    user_name   VARCHAR2(20),
    gender      CHAR(1),
    phone       CHAR(13)
);*/
INSERT INTO USER_NOCONS VALUES(1, 'user01', '1234', '유저1', 'F', '010-1234-5678');
INSERT INTO USER_NOCONS VALUES(NULL, NULL, NULL, '유저1', 'F', '010-1234-5678');
INSERT INTO USER_NOCONS VALUES(1, 'user01', '1234', '유저1', 'F', '010-1234-5678');

SELECT * FROM USER_NOCONS;
DROP TABLE USER_NOCONS;
/*1. NOT NULL*/
CREATE TABLE USER_NONULL (
    USER_NO     NUMBER NOT NULL,
    USER_ID     VARCHAR2(20) NOT NULL,
    USER_FW     VARCHAR2(20) NOT NULL,
    USER_NAME   VARCHAR2(20),
    GENDER      CHAR(1),
    PHONE       CHAR(13)
);

INSERT INTO USER_NONULL VALUES(1, 'user01', '1234', '유저1', 'F', '010-1234-5678');
INSERT INTO USER_NONULL VALUES(2, 'user02', '1111', '유저1', 'F', '010-1234-5678');

SELECT * FROM USER_NONULL;
/* 2. UNIQUE
-- UNIQUE 제약조건 설정방법 - 1. 컬럼에서 설정*/
CREATE TABLE USER_UNIQUE (
    USER_NO     NUMBER,
    USER_ID     VARCHAR2(20) UNIQUE,
    USER_FW     VARCHAR2(20),
    USER_NAME   VARCHAR2(20),
    GENDER      CHAR(1),
    PHONE       CHAR(13)
);
/* UNIQUE 제약조건 설정방법 - 2. 테이블 레벨에 설정*/
CREATE TABLE USER_UNIQUE (
    USER_NO     NUMBER,
    USER_ID     VARCHAR2(20),
    USER_FW     VARCHAR2(20),
    USER_NAME   VARCHAR2(20),
    GENDER      CHAR(1),
    PHONE       CHAR(13),
    UNIQUE (USER_ID)
);
/*UNIQUE + NOT NULL*/
CREATE TABLE USER_UNIQUE2 (
    USER_NO     NUMBER,
    USER_ID     VARCHAR2(20) UNIQUE NOT NULL,
    USER_FW     VARCHAR2(20),
    USER_NAME   VARCHAR2(20),
    GENDER      CHAR(1),
    PHONE       CHAR(13)
);
INSERT INTO USER_UNIQUE2 VALUES(1, NULL, '1234', '유저1', 'F', '010-1234-5678');
SELECT * FROM USER_UNIQUE2;
/* UNIQUE 제약조건 설정방법 - 2. 테이블 레벨에 설정 (2개인경우 &)*/
CREATE TABLE USER_UNIQUE3 (
    USER_NO     NUMBER,
    USER_ID     VARCHAR2(20),
    USER_FW     VARCHAR2(20),
    USER_NAME   VARCHAR2(20),
    GENDER      CHAR(1),
    PHONE       CHAR(13),
    UNIQUE ( USER_ID,USER_NO )
);
INSERT INTO USER_UNIQUE3 VALUES(1, 'user01', '1234', '유저1', 'F', '010-1234-5678');
INSERT INTO USER_UNIQUE3 VALUES(1, 'user02', '1234', '유저1', 'F', '010-1234-5678');
INSERT INTO USER_UNIQUE3 VALUES(2, 'user01', '1234', '유저1', 'F', '010-1234-5678');
SELECT * FROM USER_UNIQUE3;

/* PRIMARY KEY = UNIQUE + NOT NULL + 고유식별자라는 상징적인 의미*/
CREATE TABLE USER_PK1 (
    USER_NO     NUMBER PRIMARY KEY,
    USER_ID     VARCHAR2(20),
    USER_FW     VARCHAR2(20),
    USER_NAME   VARCHAR2(20),
    GENDER      CHAR(1),
    PHONE       CHAR(13)
);

INSERT INTO USER_PK1 VALUES(NULL, 'user01', '1234', '유저1', 'F', '010-1234-5678');
SELECT * FROM USER_PK1;
/* PRIMARY KEY 테이블 레벨*/
CREATE TABLE USER_PK1 (
    USER_NO     NUMBER,
    USER_ID     VARCHAR2(20),
    USER_FW     VARCHAR2(20),
    USER_NAME   VARCHAR2(20),
    GENDER      CHAR(1),
    PHONE       CHAR(13),
    PRIMARY KEY ( USER_NO )
);
/* 두 컬럼을 합쳐서 PRIMARY KEY로 사용하는 경우*/
CREATE TABLE USER_PK2 (
    USER_NO     NUMBER,
    USER_ID     VARCHAR2(20),
    USER_FW     VARCHAR2(20),
    USER_NAME   VARCHAR2(20),
    GENDER      CHAR(1),
    PHONE       CHAR(13),
    PRIMARY KEY ( USER_NO,USER_ID )
);

INSERT INTO USER_PK2 VALUES(1, 'user01', '1234', '유저1', 'F', '010-1234-5678');
INSERT INTO USER_PK2 VALUES(1, 'user02', '1234', '유저1', 'F', '010-1234-5678');
INSERT INTO USER_PK2 VALUES(2, 'user01', '1234', '유저1', 'F', '010-1234-5678');
SELECT * FROM USER_PK2;
/*===============================================*/

CREATE TABLE SHOP_MEMBER (
    MEMBER_NO     NUMBER PRIMARY KEY,
    MEMBER_ID     VARCHAR2(20) UNIQUE,
    MEMBER_PW     VARCHAR2(30) NOT NULL,
    MEMBER_NAME   VARCHAR2(20),
    PHONE         CHAR(13)
);

INSERT INTO SHOP_MEMBER VALUES(1, 'user01','1234','유저1','010-1234-5678');
INSERT INTO SHOP_MEMBER VALUES(2, 'user02','2435','유저2','010-6945-5678');
INSERT INTO SHOP_MEMBER VALUES(3, 'user03','5756','유저3','010-9845-5678');
INSERT INTO SHOP_MEMBER VALUES(4, 'user11','3245','유저11','010-9845-5678');

SELECT * FROM SHOP_MEMBER;

CREATE TABLE SHOP_BUY (
    BUY_NO         NUMBER PRIMARY KEY,
    USER_ID        VARCHAR2(20),
    PRODUCT_NAME   VARCHAR2(30)
);
INSERT INTO SHOP_BUY VALUES(1,'user01','아이폰12');
INSERT INTO SHOP_BUY VALUES(2,'user03','노트북');
INSERT INTO SHOP_BUY VALUES(3,'user11','이레빌딩');
SELECT * FROM SHOP_BUY;
/* COLUMN 방법
CREATE TABLE SHOP_BUY1 (
    BUY_NO         NUMBER PRIMARY KEY,
    USER_ID        VARCHAR2(20) REFERENCES shop_member(member_id),
    PRODUCT_NAME   VARCHAR2(30)
);
*/
CREATE TABLE SHOP_BUY1 (
    BUY_NO         NUMBER PRIMARY KEY,
    USER_ID        VARCHAR2(20),
    PRODUCT_NAME   VARCHAR2(30),
    FOREIGN KEY(USER_ID) REFERENCES SHOP_MEMBER(MEMBER_ID) /*UNIQUE Or FOREIGN KEY 사용 가능*/
);

INSERT INTO SHOP_BUY1 VALUES(1,'user01','아이폰12');
INSERT INTO SHOP_BUY1 VALUES(2,'user03','노트북');
INSERT INTO SHOP_BUY1 VALUES(3,'user11','이레빌딩');

SELECT * FROM SHOP_BUY1;
DROP TABLE SHOP_BUY1;
/**/
CREATE TABLE SHOP_BUY2 (
    BUY_NO         NUMBER PRIMARY KEY,
    USER_NO        NUMBER REFERENCES SHOP_MEMBER(MEMBER_NO),  /*REFERENCES 시 dataType 같아야 함*/
    PRODUCT_NAME   VARCHAR2(30)
);
/*TABLE 이름만 작성하고 참조할 컬럼을 지정ㅇ하지 않는 경우 해당 TABLE의 PRIMARY KEY를 참조*/
CREATE TABLE SHOP_BUY3 (
    BUY_NO         NUMBER PRIMARY KEY,
    USER_NO        NUMBER REFERENCES SHOP_MEMBER,  /*REFERENCES 시 dataType 같아야 함*/
    PRODUCT_NAME   VARCHAR2(30)
);
/*REFERENCES시 UNIQUE Or FOREIGN KEY만 사용 가능*/
CREATE TABLE SHOP_BUY4 (
    BUY_NO         NUMBER PRIMARY KEY,
    USER_NAME      VARCHAR2(20) REFERENCES SHOP_MEMBER(MEMBER_NAME),
    PRODUCT_NAME   VARCHAR2(30)
);
/*실습*/

/*
CREATE TABLE SHOP_BUY1 (
    BUY_NO         NUMBER PRIMARY KEY,
    USER_ID        VARCHAR2(20),
    PRODUCT_NAME   VARCHAR2(30),
    FOREIGN KEY(USER_ID) REFERENCES SHOP_MEMBER(MEMBER_ID) ON DELETE SET NULL --UNIQUE Or FOREIGN KEY 사용 가능
);
*/

INSERT INTO SHOP_BUY1 VALUES(1,'user01','아이폰12');
INSERT INTO SHOP_BUY1 VALUES(2,'user03','노트북');
INSERT INTO SHOP_BUY1 VALUES(3,'user11','이레빌딩');


DROP TABLE SHOP_BUY1;
DROP TABLE SHOP_BUY2;
DROP TABLE SHOP_BUY3;
SELECT * FROM SHOP_BUY1;
SELECT * FROM SHOP_MEMBER;
DELETE FROM SHOP_MEMBER WHERE MEMBER_NO = 2;
DELETE FROM SHOP_MEMBER WHERE MEMBER_NO = 1;

COMMIT;